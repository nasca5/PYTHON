# # 숫자형
# # 제곱을 나타내는 연산자 : **
# # 나눗셈 후 나머지를 반환하는 연산자 : %
# # 나눗셈 후 몫을 반환하는 연산자 : // -> /은 그냥 나누는 연산자 예를 들어 7/5 = 1.4임

# # 문자형
# # 이스케이프 코드
# # 문자열 연산하기
# # 문자열 +기호로 연결 가능함
# # 문자열 *기호로 곱하기 가능
# # 문자열 길이는 len() 함수로 구할 수 있음 -> a = "head"일 때, len(a) = 4임

# # 나 혼자 코딩
# # 'You need python' 문장을 문자열로 만들고 길이를 구해 보자.
# a = 'You need python'
# print(len(a))




# # 문자열 인덱싱, 슬라이싱 : 인덱싱은 가리키는 것, 슬라이싱은 잘라내는 것
# # 인덱싱 -> a = 'head'이면 a[3] = d / 인덱스는 0부터 시작함
# # 슬라이싱 -> a = 'my head is big'이면 a[0:4] = 'my h' / 0부터 3까지의 인덱스값을 잘라낸다는 뜻
# # a[:9]은 문자열 시작부터 9까지 잘라내고, a[3:]은 문자열 인덱스3인부분부터 문자열 끝까지 잘라낸다는 뜻

# # 점프 투 파이썬
# # Pithon이라는 문자열을 Python으로 바꾸려면?
# # a = 'Pithon'
# # print(a)
# # a[1] = 'y'
# # print(a)
# # -> 문자열의 요솟값은 바꿀 수 있는 값이 아니기 때문에 이렇게 하면 오류가 난다. 이럴 때 슬라이싱을 사용하면 원할하게 문자열을 바꿀 수있다.
# a = 'Pithon'
# print(a)
# print(a[0] + 'y' + a[2:])




# # 문자열 포매팅(Formatting) : 문자열 안의 특정한 값을 바꿔야 할 경우 이것을 가능하게 해준다.
# # %s : 문자열 / %d : 정수 / %f : 부동 소수 / %c : 문자 한 개
# # %s 는 다른 포매팅 코드와 달리 어떤 형태의 값을 넣든 문자열로 변환하므로 오류를 일으키지 않는다
# # 포매팅안에 숫자를 넣게 되면 오른쪽, 왼쪽 정렬이 가능하다. -> %10s : 10칸의 공간에서 오른쪽 정렬 %-10s : 10칸의 공간에서 왼쪽 정렬
# # 부동 소수를 표현하는 포매팅 코드 %f는 .과 숫자를 넣으면 소수점 아래 몇 자리까지 나타낼 건지 정할 수 있다. -> %10.4f : 전체 10칸의 길이에서 소수점 아래 4자리까지 나타낸 채로 오른쪽 정렬
# number = 3
# number2 = 4
# # 한 개의 값
# print('I eat %d apple' % number)
# # 두 개 이상의 값
# print('I eat %d~%d apple' % (number, number2))
# # format 함수를 사용한 포매팅 : 문자열의 format 함수를 사용하면 좀 더 발전된 스타일로 문자열 포맷을 지정할 수 있다.
# # 숫자 바로 대입
# print("I eat {0} apples".format(3))
# # 문자열 바로 대입
# print("I eat {0} apples".format('five'))
# # 값을 가진 변수를 대입
# number = 3
# print("I eat {0} apples".format(number))
# # 2개 이상의 값 넣기 
# number = 4
# day = 5
# print('I ate {0} apples. so I was sick for {1} days'.format(number, day))
# print('I ate {number} apples. so I was sick for {day} days'.format(number = 10, day = 3))
# # 왼쪽 정렬
# print('{0:<10}'.format('hi'))
# # 오른쪽 정렬
# print('{0:>10}'.format('hi'))
# # 가운데 정렬
# print('{0:^10}'.format('hi'))
# # 공백 채우기
# print('{0:=^10}'.format('hi'))
# # 소수점 표현하기
# y = 3.5342342
# print('{0:10.4f}'.format(y))




# # f 문자열 포매팅 : 파이썬 3.6 버전부터는 f 문자열 포매팅 기능을 사용할 수 있다. 문자열 앞에 f 접두사를 붙이면 f 문자열 포매팅 기능을 사용할 수 있다.
# # f 문자열 포매팅은 표현식도 지원하므로 중괄호 안에 변수의 값을 사칙 연산같은 것을 해서 바꿀 수도 있다.
# name = '홍길동'
# age = 30  
# print(f'나의 이름은 {name}이고 내 나이는 {age}입니다')
# # 왼쪽 정렬
# print(f'{"hi":<10}')
# # 오른쪽 정렬
# print(f'{"hi":>10}')
# # 가운데 정렬
# print(f'{"hi":^10}')
# # 공백 채우기
# print(f'{"hi":=^10}')

# #나 혼자 코딩
# # fotmat 함수 또는 f 문자열 포매팅을 사용해 '!!!python!!!'를 출력해보자.
# print(f'{"python":!^12}')




# # 문자열 관련 함수
# # 문자 개수 세기 -> count()
# a = "hobby"
# print(a.count('b'))
# # 위치 알려주기 -> .find(찾는 문자) / .index(찾는 문자)
# # 문자열 삽입 -> '삽입할 문자'.join() : 각각의 문자 사이에 삽입할 문자 삽입
# # 문자열 바꾸기 -> .replace(바꾸고싶은 문자, 바꿀 문자)
# # 문자열 나누기 -> .split(기준이 되는 구분자) : 괄호 안의 구분자를 기준으로 문자열을 나누고 이렇게 나뉜 문자열들은 리스트에 담긴다.



##########################################################################################################################################################################################

# # 리스트 자료형
# # 리스트는 비어 있을 수도 있고, 숫자와 문자열을 함께 요솟값으로 가질 수도 있고, 리스트 안에 또 다른 리스트를 요솟값으로 가질 수도 있다.
# # odd = [1, 3, 5 , 7, 9]
# a = [1, 2, 3, 4, 5] 
# print(a)

# # 리스트 자료형도 문자열처럼 인덱싱이 가능하다.
# print(a[0]) # 1
# print(a[0]+a[2]) # 4

# # 이중 리스트에서 인덱싱하기
# b = [1, 2, [3, 4]]
# print(b[2][1]) # 4

# # 슬라이싱 또한 가능하다.
# print(a[0:2]) # [1, 2]
# print(a[:4]) # [1, 2, 3, 4]

# # 나 혼자 코딩 
# # A = [1,2,3,4,5] 리스트에서 슬라이싱 기법을 사용하여 리스트 [2,3]을 만들어보자.
# A = [1,2,3,4,5]
# B = A[1:3]
# print(B)

# # 리스트 연산하기
# # 1. 리스트 더하기
# print(A+B) # [1,2,3,4,5,2,3]
# # 2. 리스트 곱하기
# print(B*3) # [2,3,2,3,2,3]
# # 3. 리스트 길이 구하기 -> len()함수 이용 / len()함수는 문자열, 리스트 외에도 튜플과 딕셔너리에서도 사용할 수 있는 함수이다.
# print(len(A)) # 5

# # 리스트의 수정과 삭제
# # 리스트 수정하기
# a = [1,2,3]
# a[2] = 4
# print(a[2]) # 4
# # 리스트 삭제하기 -> del 함수 사용 / 슬라이싱 기법을 사용하여 여러 개의 요솟값을 한꺼번에 삭제할 수도 있다.
# del a[2]
# print(a) # [1,2]

# # 리스트 관련 함수
# # 리스트에 요소 추가(append)
# a.append(4)
# print(a) # [1,2,4]
# a.append([2,3])
# print(a) # [1,2,4,[2,3]]

# # 리스트 정렬(sort)
# b = [3,2,1,5,6,4]
# b.sort()
# print(b) # [1,2,3,4,5,6]

# # 위치 반환(index) -> 리스트에 찾는 값이 있으면 찾는 값의 위치를 반환한다. / 찾는 값이 리스트에 없으면 값 오류가 발생한다.
# print(a.index(2))

# # 리스트에 요소 삽입(insert) -> insert(a, b)는 리스트의 a번째 위치에 b를 삽입하는 함수이다.
# b.insert(2,5)
# print(b) # [1,2,5,3,4,5,6]

# # 리스트 요소 제거(remove) -> remove(x)는 리스트에서 첫 번째로 나오는 x를 삭제하는 함수이다. / del a[x] 함수는  x번째 값 삭제
# a = [1,2,3,4,5,6]
# a.remove(3)
# print(a) # [1,2,4,5,6]

# # 리스트 요소 끄집어내기(pop) -> pop()은 리스트의 맨 마지막 요소를 돌려주고 그 요소는 삭제한다. /괄호 안에 숫자를 넣으면 해당 인덱스에 있는 값을 빼내고 리스트에서 삭제한다.
# a = [1,2,3] 
# print(a.pop()) # [1,2]
# print(a) # 3

# # 리스트에 포함된 요소 x의 개수 세기(count) -> count(x)는 리스트 안에 x가 몇 개 있는지 조사하고 그 개수를 돌려주는 함수이다.
# a = [1,2,3,1,2,1]
# print(a.count(1)) # 3

# # 리스트 확장(extend) -> extend(x)는 x에는 리스트자료형만 올 수 있고, 원래의 a리스트에 x리스트를 더한다.
# a = [1,2,3,4,5]
# x = [2,3]
# a.extend(x)
# print(a) # [1,2,3,4,5,2,3]



##########################################################################################################################################################################################

# # 튜플 자료형 
# # 튜플은 몇 가지를 제외하곤 리스트와 거의 비슷하며 리스트와 다른 점은 다음과 같다.
# # 1. 리스트는 []로 둘러싸지만 튜플은 ()로 둘러싼다.
# # 2. 리스트는 그 값의 생성, 삭제, 수정이 가능하지만 튜플은 그 값을 바꿀 수 없다.
# # 3. 튜플은 둘러싸는 ()를 생략해도 무방하다.
# # 4. 튜플은 요솟값을 수정하거나 삭제할 수 없다는 점만 제외하면 리스트가 할 수 있는 거의 모든 것을 할 수 있다. -> 인덱싱, 슬라이싱, 더하기, 곱하기, 길이 구하기 등등..

# # 나 혼자 코딩
# # (1, 2, 3)이라는 튜플에 값 4를 추가하여 (1, 2, 3, 4)를 만들어 출력해 보자.
# a = (1, 2, 3)
# a += (4,)
# print(a)


##########################################################################################################################################################################################

# # 딕셔너리 자료형
# # key와 value를 한 쌍으로 대응 관계를 나타낼 수 있는 자료형이다.
# # 딕셔너리는 리스트, 튜플과 달리 순차적으로 요솟값을 구하는 것이 아닌 key값을 통해 value를 얻는다. 
# # value값에 리스트도 넣을 수 있다.
# dic = {'name' : 'Kang',
#       'phone' : '01077143103',
#       'birth' : '0903'
#       }

# print(dic['name'])

# # 딕셔너리 쌍 추가하기
# a = {1 : 'a'}
# a[2] = 'b'
# print(a) # {1 : 'a', 2 : 'b'}

# # 딕셔너리 요소 삭제하기

# del a[1]
# print(a) # [2 : 'b']

# # 딕셔너리 자료형은 요솟값을 얻기 위해 반드시 key값을 사용해야 한다. 인덱싱이나 슬라이싱을 사용하는 리스트나 튜플과는 다르다.
# # 딕셔너리에서 key는 고유한 값이므로 중복되는 key값을 설정해 놓으면 하나를 제외한 나머지는 모두 무시되므로 주의해야 한다.
# # 딕셔너리에서 key값은 변하지 않는 값이어야 하기 때문에 key값으로 리스트 자료형은 쓸 수 없으나 튜플 자료형은 쓸 수 있다.

# # 딕셔너리 관련 함수
# # 1. key 리스트 만들기(keys()) -> a.keys()는 딕셔너리의 a의 key값만을 모아서 dict_keys 객체를 돌려준다.
# print(dic.keys())
# # dict_keys 객체를 리스트로 받을려고 하거나 받은 다음 리스트로 변환하고 싶으면 list(a.keys())를 쓰면 된다.
# print(list(dic.keys()))

# # 2. value 리스트 만들기(values()) -> a.values()는 딕셔너리의 a의 value값만을 모아서 dict_values 객체를 돌려준다.
# # 이것또한 리스트로 바꾸고 싶으면 위에서 한 것처럼 하면 된다.

# # 3. key, value 쌍 얻기(items())
# # 이것또한 dict_items 객체로 돌려주고 리스트 형태로 변환할 수 있다.

# # 4. key, value 쌍 모두 지우기(clear())
# # 딕셔너리 안의 모든 요소를 삭제한다. 

# # 5. 해당 key가 딕셔너리 안에 있는지 조사하기(in)
# A = 'name' in dic # TRUE
# B = 'email' in dic # FALSE

# print(A)
# print(B)

# # 나 혼자 코딩
# # 다음 표를 딕셔너리로 만드시오.
# dic = {'name' : '홍길동',
#       'birth' : '1128',
#       'age' : 30
#       }

# print(dic)



##########################################################################################################################################################################################


# 집합 자료형(set)
# 집합에 관련된 것을 쉽게 처리하기 위해 만든 자료형이다.