# if문
# if문의  기본 구조

if 1<3 :
  print('aa')
else:
  print('bb')
  
# 파이썬에서는 if문에 중괄호를 쓰지 않기 때문에 if나 else 문 아래에 실행할 문장들은 반드시 들여쓰기를 제대로 해야 오류가 나지 않는다.
# 또한 앞으로 배울 반복문이나 함수도 그렇고 대부분 :을 붙여야 하니 조심하자.

# 조건문의 연산자들에는 and, or, not이 있다.
# 또한 파이썬의 조건문은 리스트나 튜플, 문자열 등에서 x in n 같이 n 안에 x가 있냐는 식의 간결한 조건문도 쓸 수 있다. not in도 사용 가능하다.
#  만약 조건문이 참일 때 아무 문장도 실행하고 싶지 않다면 실행할 문장에 pass를 작성하면 넘어가버린다.

# elif : if와 else만으로는 판단하기 힘든 다양한 조건이 있을 때 쓰면 좋다.


# while 조건문의 기본 구조
# while 조건문 : 
#     수행절 1
#     수행절 2
#     수행절 3
#     ...

# while 조건문에서 탈출하는 방법 : 탈출하고자 하는 조건 아래에 break를 쓰면 된다.

# while 조건문에서 한 단락을 건너뛰고 싶을때 : 건너뛰고자하는 조건 아래에 continue를 쓰면 된다.

# 나 혼자 코딩
# a, b = 0, 0
# while a <= 9 :
#   a += 1
#   if a % 3 == 0 :
#     continue
#   else :
#     b += a
# print(b)

# for 문의 기본 구조 
# for 변수 in list(또는 tuple, 문자열) :
#   수행절 1...
#   수행절 2...
#   ...

# for 문은 보통 문자열이나 리스트, 튜플의 첫 번째 요소부터 마지막 요소까지 순차적으로 변수에 대입되어 남아있는 변수가 없을 때까지 수행절을 실시한다.
# for 문에서도 continue를 쓸 수 있다.

# range() : for 문은 숫자 리스트를 자동으로 만들어주는 range() 함수와 함께 사용되는 경우가 많다.
# range() 함수의 구조 : for i in range(1, 10, 1) 1 -> 시작 요소, 10 -> 끝 요소 1-> 한 번에 증가할 양 / 보통 시작 요소와, 끝 요소는 생략하는 경우가 많다.
# 첫 요소와 끝 요소를 생략하고 range(10)  이런 식으로 쓰게 되면 첫 요소와 끝 요소에 기본값인 0과 1이 들어가 0부터 10 바로 전인 9까지 1씩 증가하면서 loop를 탄다는 뜻이다.
# 파이썬 print() 함수는 개행 문자를 따로 넣지 않아도 입력을 한 번 받으면 알아서 개행을 한다. 입력을 다 했는데 개행을 하기 싫다면, 끝에 end = ' '를 쓰면 된다. -> print(i*j, end = ' ') 이런 식으로

# 리스트 내포 : 리스트 안에 for문을 포함하는 리스트 내포를 사용하면 좀 더 편리하고 직관적인 프로그램을 만들 수 있다.
# for문 안에 if 조건문 또한 넣을 수 있다. 간단한 식을 표현하기에는 좀 더 편리하고 직관적이다.
# a = [1, 2, 3, 4]
# result = []
# for num in a :
#   result.append(num*3)

# print(result)

# =>

# result = [num * 3 for num in a]
# print(result)

# 이러한 리스트 내포의 일반 문법은 아래와 같다.
# [표현식 for 항목 in 반복 가능 객체 if 조건] -> if 조건문은 생략해도 된다.

# 


