# 함수 

# 함수를 사용하는 이유 : 
# 1. 반복적으로 사용되는 가치 있는 부분을 한 뭉치로 묶어서 어떤 입력값을 주었을 때 어떤 결괏값을 돌려준다 는 느낌으로 함수를 짜는 것이 현명하다.
# 2. 내가 만든 프로그램을 함수화하면 프로그램 흐름을 일목요연하게 볼 수 있기 때문이다.

# 파이썬 함수의 구조 : 
# def add(a, b) :
#   수행절..
#   수행절..
#   ...
#   return ...

# 매개 변수(parameter)와 인수(arguments)
# 매개 변수 : 매개 변수는 함수에 입력으로 전달된 값을 받는 변수를 의미한다
# 인수 : 함수를 호출할 때 전달하는 입력값을 의미한다.

# -> 입력값이나 리턴값 또는 둘 다 없는 함수들도 당연히 만들 수 있고 자주 쓰인다.
# 매개 변수에 굳이 미리 할당한 변수를 주는 것이 아닌 매개 변수를 바로 지정하여 사용할 수도 있다.
# ->
# result = add(a = 3, b = 7) 이런식으로

# 입력값이 몇 개가 될 지 모를 때는 어떻게 해야 할까?
# def 함수 이름(*매개 변수) :
#   수행절...
#   ...
#   return ...

# 이런 식으로 매개 변수 앞에 *을 붙이면 입력 받은 매개 변수들을 모두 모아서 tuple로 만들어준다. 
# 또한 저렇게 함수를 만들 때 매개 변수를 저것만 넣을 수 있는 것도 아니고, 다른 매개 변수도 넣을 수 있다. ㄹㅇ 개짱짱맨인 듯

# 키워드 파라미터 : 키워드 파라미터를 사용할 때는 매개 변수 앞에 * 두개를 붙이는데, 이것은 매개 변수로 키와 값을 입력하면 그것들을 모두 딕셔너리 형태로 저장해준다.

# 함수의 결괏값은 언제나 하나이다.
# 만약 return 값으로 두 개 이상의 값을 하나의 변수에 반환한다면 변수는 이 값들을 tuple로 저장할 것이다. 만약 tuple로 저장되는 것이 싫다면
# return 1, return 2 = add(a, b) 이런식으로 설정하게 되면 각각에 하나의 값이 반환된다.
# 또한 return은 함수를 바로 빠져나가고자 할 때에도 자주 사용된다. 만약 return값이 없다면 함수는 즉시 종료된다.

# 매개 변수에 초깃값 미리 설정하기
# def say_myself (name, old, man= True) : 
#   print('나의 이름은 %s입니다.' % name)
#   print('나이는 %d살입니다.' % old)
#   if man :
#     print('남자입니다.')
#   else :
#     print('여자입니다.')
    
# say_myself('Kang', 26)
# 이런식으로 매개 변수의 초깃값을 설정할 수 있습니다. 
# 하지만 이러한 매개 변수의 초깃값 설정은 설정하고 싶은 매개 변수를 중간이나 앞 쪽에 놓게 된다면 매개 변수를 전달받는 과정에서 파이썬 인터프리터가
# 어떤 곳에 인수를 전달할 지 알지 못하므로 오류를 일으킨다. 그러니 초깃값으로 설정하고 싶은 매개 변수는 뒤쪽으로 빼놓는 것을 잊지 말자.

# 함수 안에서 선언한 변수의 효력 범위
# 함수 밖에서 선언한 변수를 함수에게 인수로 전달한다고 해서 함수가 해당 변수를 매개 변수를 가지는 것이 아니라 해당 인수와 값이 같은 새로운 함수 안에서의 매개 변수를 생성하는 것이다. 
# 그러므로 함수에 인수를 전달하고 함수 안에서 매개 변수의 값이 바꼈다고 해서 밖에 있던 변수의 값이 바뀌지는 않는다.
# 함수 안에서의 변수는 함수 안에서만 효력을 가진다는 뜻이다. 
# 하지만 그럼에도 불구하고 함수 안에서 바깥의 변수의 값을 변경하고싶다면 2가지 방법이 있다.

# 1. return을 이용해서 반환값을 함수 밖의 변수에게 반환하면 된다.
# 2. global 명령어를 사용하면 함수 안에서 함수 밖의 변수를 직접적으로 사용할 수 있다. 변수를 전역 변수로 재선언하는 셈이다.
# -> 하지만 이러한 전역 변수는 좋지 않다. 함수는 최대한 독립적으로 있는 것이 좋고, 외부 변수에 종속되는 함수는 좋지 않기 때문에 가급적이면 global 명령어는 사용하지 않는 것이 좋고, 반환값을 이용해 변경하도록 하자.

# lambda : lambda는 함수를 생성할 때 사용하는 예약어로 def와 동일한 역할을 한다. 보통 함수를 한 줄로 간결하게 만들 때 사용한다. 
# 우리말로는 '람다'라고 일고 def를 사용해야 할 정도로 복잡하지 않거나 def를 사용할 수 없는 곳에 주로 쓰인다.
# 사용법 : lambda 매개변수 1, 매개변수 2, ... : 매개 변수를 사용한 표현식


##########################################################################################################################################################################


# 사용자 입력과 출력 

# 사용자 입력 : input의 사용
# input()은 입력되는 모든 것을 문자열로 취급한다.
# 사용자에게 입력받을 때 숫자를 입력하세요 같은 식으로 문구 또는 질문을 하고 입력받고 싶을 때는 input('숫자를 입력하세요')처럼 쓰면 된다.

# print() 자세히 알기
# print() 문은 우리가 입력한 자료형을 출력하는 것이다.
# print() 사용법
# 1. 큰 따옴표("")로 둘러싸인 문자열은 + 연산과 동일하다.
# -> print("life" "is" "too short") => "lifeistoo short"
# 2. 문자열 띄어쓰기는 콤마(,)로 한다. -> 콤마(,)를 사용하면 문자열 사이에 띄어쓰기를 할 수 있다.
# 3. ,end=""를 사용하여 한 줄에 이어서 출력하도록 조정할 수 있다.

################################################################################################################################################

# 파일 읽고 쓰기 : 파일을 새로 만든 다음 프로그램이 만든 결괏값을 새 파일에 적어볼 수 있다. 또 파일에 적은 내용을 읽고, 새로운 내용을 추가하는 방법도 있다.

# 파일 생성하기 
# f = open("test.txt", "w")
# f.close()

# open() 함수는 '파일 이름'과 '파일 열기 모드'를 입력값으로 받고 결괏값으로 파일 객체를 돌려준다.
# 파일 객체 = open(파일 이름, 열기 모드)
# 열기 모드에는 다음과 같이 3가지 모드가 있다.
# r : 읽기 모드 - 파일을 읽기만 할 때 사용 
# w : 쓰기 모드 - 파일에 내용을 쓸 때 사용 => 해당 파일이 이미 존재할 경우 내용이 모두 사라지고, 존재하지 않으면 새로운 파일을 생성한다. 
# a : 추가 모드 - 파일의 마지막에 새로운 내용을 추가할 때 사용

# fclose() 함수는 열려 있는 파일 객체를 닫아주는 역할을 한다. 
# 사실 프로그램이 종료될 때 파이썬이 알아서 열려 있는 파일의 객체를 닫아주지만, 파일을 닫지 않고 다시 사용하려 하면 오류가 발생할 수도 있기 때문에 다 쓰면 직접 닫아주는 것이 좋다.

# 파일을 쓰기 모드로 열어 출력값 적기 "w"
# f = open("test.txt", "w")
# for i in range(1,11) : 
#   data = "%d번째 줄입니다.\n" % i
#   f.write(data)
# f.close()

# 프로그램의 외부에 저장된 파일을 읽는 여러 가지 방법 "r"
# 1. f.readline() 함수 사용하기
# f = open("test.txt", "r")
# while True :
#   line = f.readline()
#   if not line : break
#   print(line)
# f.close()

# 2. f.readlines() 함수 사용하기
# f.readlines() 함수는 파일의 모든 줄을 읽어서 각각의 줄을 요소로 가지는 리스트로 돌려준다.
# f = open("test.txt", "r")
# lines = f.readlines()
# for line in lines :
#   print(line)
# f.close()

# 3. f.read() 함수 사용하기
# f.read() 함수는 파일의 내용 전체를 문자열로 돌려준다. 따라서 for문이나 while문을 돌릴 필요는 없다.

# 파일에 새로운 내용 추가하기 "a"
# 원래 있던 값을 유지하면서 새로운 값만 추가해야 할 경우에 쓸 수 있다.
# f = open("test.txt", "a")
# for i in range(11, 20) :
#   data = "%d번째 줄입니다\n" % i
#   f.write(data)
# f.close()

# with문과 함께 사용하기
# 파일을 열고 닫는 것을 자동으로 처리할 수 있게 해준다.
# with open("test.txt", "a") as f :
#   f.write("Life is too short, you need Python")
# 위와 같이 사용하면 with 블록을 벗어나는 순간 열린 파일 객체가 자동으로 close되어 편리하다.
